Description: API Gateway and lambda
AWSTemplateFormatVersion: "2010-09-09"


Parameters:
  S3KeyPath:
    Type: String

Resources:
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Description: Handles scaling up and down of ECS and ALB stacks
    Properties:
      FunctionName: "task-master-service"
      Handler: src/handler/hello_handler.handle
      Runtime: python3.13
      MemorySize: 128
      Code:
        S3Bucket: "eb-solutions-code-deployment"
        S3Key: !Sub "services/task-master/${S3KeyPath}/service.zip"
      Role: arn:aws:iam::654918520080:role/task-master-role
      Timeout: 60
      Tags:
        - Key: CostCenter
          Value: services.task-master

  LambdaPermission:
    DependsOn: [ LambdaFunction ]
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [ "", [ "arn:aws:execute-api:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", Ref: "ApiGateway", "/*" ] ]

  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "task-master-apigw"

  ProxyResource:
    DependsOn: [ ApiGateway ]
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      PathPart: "hello"

  ApiGatewayRootMethod:
    DependsOn: [ LambdaFunction, ApiGateway ]
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref ApiGateway

  ApiGatewayDeployment:
    DependsOn: [ ApiGatewayRootMethod ]
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod